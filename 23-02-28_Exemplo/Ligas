{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1a7Dh6na_OdHdX4uPD40JldVQzax9QJkQ","timestamp":1677624316459},{"file_id":"1mERM9zAldZXYgwDeSg7dVIXR94UGVZbC","timestamp":1552324884424}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"OUc22k4shZlq"},"source":["#Problema: Ligas metálicas\n","\n","####Uma metalúrgica produz dois tipos de ligas metálicas. Cada liga é composta de proporções diferentes de cobre, zinco e chumbo, os quais estão disponíveis em quantidades limitadas em estoque. Deseja-se determinar quanto produzir de cada liga, de modo a maximizar a receita bruta, satisfazendo as seguintes composições das ligas e a disponibilidade de matéria-prima em estoque:\n","\n","\n","\n","\n","<style type=\"text/css\">\n",".tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}\n",".tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}\n",".tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}\n",".tg .tg-koh6{font-size:36px;border-color:inherit;text-align:left;vertical-align:top}\n","</style>\n","<table class=\"tg\">\n","  <tr>\n","    <th class=\"tg-koh6\">Matéria-prima</th>\n","    <th class=\"tg-koh6\">Liga 1</th>\n","    <th class=\"tg-koh6\">Liga 2</th>\n","    <th class=\"tg-koh6\">Estoque</th>\n","  </tr>\n","  <tr>\n","    <td class=\"tg-koh6\">Cobre</td>\n","    <td class=\"tg-koh6\">50%</td>\n","    <td class=\"tg-koh6\">30%</td>\n","    <td class=\"tg-koh6\">3 ton</td>\n","  </tr>\n","  <tr>\n","    <td class=\"tg-koh6\">Zinco</td>\n","    <td class=\"tg-koh6\">10%</td>\n","    <td class=\"tg-koh6\">20%</td>\n","    <td class=\"tg-koh6\">1 ton</td>\n","  </tr>\n","  <tr>\n","    <td class=\"tg-koh6\">Chumbo</td>\n","    <td class=\"tg-koh6\">40%</td>\n","    <td class=\"tg-koh6\">50%</td>\n","    <td class=\"tg-koh6\">3 ton</td>\n","  </tr>\n","  <tr>\n","    <td class=\"tg-koh6\">Preço de venda (R$/ton)</td>\n","    <td class=\"tg-koh6\">3 mil</td>\n","    <td class=\"tg-koh6\">2 mil</td>\n","    <td class=\"tg-koh6\"></td>\n","  </tr>\n","</table>\n","\n","<br> </br>\n","\n","##Modelo explícito:\n","\n","\\begin{align*}\n","\\hbox{max} \\ \\ &3x_1+2x_2\\\\\n","\\hbox{s.a} \\ \\ &0,5x_1+0,3x_2\\leq 3\\\\\n","&0,1x_1+0,2x_2\\leq 1\\\\\n","&0,4x_1+0,5x_2\\leq 3\\\\\n","& \\ x_1,x_2\\geq 0\n","\\end{align*}\n","<br> </br>\n","\n","##Modelo algébrico (genérico):\n","\n","\n",">$n$ ligas\n","\n",">$m$ matérias-primas\n","\n","###Variáveis\n","\n",">$x_i$ : quantidade em toneladas a ser produzida da liga $i$, com   $i=1,\\ldots,n$\n","\n","###Parâmetros\n","\n","> $R_i$ : receita por tonelada da liga $i$, com   $i=1,\\ldots,n$\n","\n",">$D_j$ : disponibilidade da matéria-prima $j$, com   $j=1,\\ldots,m$\n","\n",">$P_{ji}$ :  percentual da matéria-prima $j$ presente na liga $i$, com   $i=1,\\ldots,n$ e $j=1,\\ldots,m$\n","\n","\n","\n","\n","\n","\n","\\begin{align*}\n","\\hbox{max} \\ \\ &\\sum_{i=1}^nR_ix_i& &\\\\\n","\\hbox{s.a} \\ \\ &\\sum_{i=1}^nP_{ji}x_i\\leq D_j& &j=1,\\ldots,m\\\\\n","& \\ x_i\\geq 0& &i=1,\\ldots,n\n","\\end{align*}\n","\n"]},{"cell_type":"code","metadata":{"id":"JzNHbD_c-Xij","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677624424854,"user_tz":180,"elapsed":5662,"user":{"displayName":"George Fahrenheit","userId":"18063364269611454870"}},"outputId":"cc3a9e8b-5831-434c-b159-a59759090cee"},"source":["# Instalando a biblioteca PyMathProg\n","!pip install pymprog"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pymprog\n","  Downloading pymprog-1.1.2.tar.gz (44 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.6/44.6 KB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Collecting swiglpk>=1.4.4\n","  Downloading swiglpk-5.0.8-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m45.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hBuilding wheels for collected packages: pymprog\n","  Building wheel for pymprog (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pymprog: filename=pymprog-1.1.2-py3-none-any.whl size=43499 sha256=77a78a4c30736bfbc56e1f5cd3eb625a8ca1edea203d1059fa83bef2f3542835\n","  Stored in directory: /root/.cache/pip/wheels/10/2a/01/9a82fe61bf9c42e427db3d65e099fa9e9f715ec1c6429f258d\n","Successfully built pymprog\n","Installing collected packages: swiglpk, pymprog\n","Successfully installed pymprog-1.1.2 swiglpk-5.0.8\n"]}]},{"cell_type":"code","metadata":{"id":"m1s8Hmm8ZnjG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677626651891,"user_tz":180,"elapsed":265,"user":{"displayName":"George Fahrenheit","userId":"18063364269611454870"}},"outputId":"8ec4f966-1f3e-4cd0-e2bf-0d68d8f4c61c"},"source":["from pymprog import* # Importando a biblioteca\n","\n","# Dados de Entrada\n","R = [3, 2] # Receita de cada liga\n","D = [3, 1, 3] # Disponibiliade de Matéria-Prima\n","P = [[0.5, 0.3],\n","     [0.1, 0.2],\n","     [0.4, 0.5]] # Percentuais de Matéria-Prima\n","\n","n = len(R) # Número de Ligas\n","m = len(D) # Número de Matérias-Primas\n","\n","begin(\"Ligas\") # Cria um modelo chamado Ligas\n","\n","x = var(\"x\", n) # Cria n variáveis contínuas maiores ou iguais a zero\n","\n","\n","# print(type(x))\n","\n","# Modelo\n","# Função Objetivo\n","maximize(sum(R[i] * x[i] for i in range(n) ))\n","\n","# Restrições\n","for j in range(m):\n","  sum(P[j][i] * x[i] for i in range(n) ) <= D[j]\n","\n","# Resolvendo\n","solve()\n","\n","# Apresentando a Solução\n","# Valor ótimo = Valor máximo da receita possível\n","print(\"Valor ótimo = \", 1000 * vobj())\n","\n","# Solução Ótimo = valores\n","for i in range(n):\n","  print(\"x[{}] = {:.3f}\". format(i+1 ,x[i].primal))\n","\n","end()\n"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Valor ótimo =  18461.538461538465\n","x[1] = 4.615\n","x[2] = 2.308\n"]},{"output_type":"execute_result","data":{"text/plain":["model('Ligas') is not the default model."]},"metadata":{},"execution_count":17}]}]}